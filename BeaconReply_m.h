//
// Generated file, do not edit! Created by nedtool 4.6 from BeaconReply.msg.
//

#ifndef _BEACONREPLY_M_H_
#define _BEACONREPLY_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "ApplPkt_m.h"
#include "Coord.h"
// }}

/**
 * Class generated from <tt>BeaconReply.msg:28</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet BeaconReply extends ApplPkt
 * {
 *     Coord peerLocation;	// Location of current peer
 *     double peerDistance;	// Distance of two peers
 *     simtime_t timeStamp;	// Time stamp
 *     uint32_t srcNetworkAddress;	// Source network address
 * }
 * </pre>
 */
class BeaconReply : public ::ApplPkt
{
  protected:
    Coord peerLocation_var;
    double peerDistance_var;
    simtime_t timeStamp_var;
    uint32_t srcNetworkAddress_var;

  private:
    void copy(const BeaconReply& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconReply&);

  public:
    BeaconReply(const char *name=NULL, int kind=0);
    BeaconReply(const BeaconReply& other);
    virtual ~BeaconReply();
    BeaconReply& operator=(const BeaconReply& other);
    virtual BeaconReply *dup() const {return new BeaconReply(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual Coord& getPeerLocation();
    virtual const Coord& getPeerLocation() const {return const_cast<BeaconReply*>(this)->getPeerLocation();}
    virtual void setPeerLocation(const Coord& peerLocation);
    virtual double getPeerDistance() const;
    virtual void setPeerDistance(double peerDistance);
    virtual simtime_t getTimeStamp() const;
    virtual void setTimeStamp(simtime_t timeStamp);
    virtual uint32_t getSrcNetworkAddress() const;
    virtual void setSrcNetworkAddress(uint32_t srcNetworkAddress);
};

inline void doPacking(cCommBuffer *b, BeaconReply& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconReply& obj) {obj.parsimUnpack(b);}


#endif // ifndef _BEACONREPLY_M_H_

