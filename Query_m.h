//
// Generated file, do not edit! Created by nedtool 4.6 from Query.msg.
//

#ifndef _QUERY_M_H_
#define _QUERY_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <vector>
#include "KeyWords.h"
#include "ApplPkt_m.h"
#include "Coord.h"
// }}

/**
 * Class generated from <tt>Query.msg:30</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Query extends ApplPkt
 * {
 *     string businessName;
 *     string businessType;
 *     Keywords keyWords;	// key words of the query search
 *     // In omnet++ we use coord instead of longitude and latitude
 *     //double longitude;
 *     //double latitude;
 *     Coord peerLocation;
 *     double maxRange;	// Max range distance of the business (unit@m)
 *     simtime_t timeStamp;	// Time stamp
 * }
 * </pre>
 */
class Query : public ::ApplPkt
{
  protected:
    opp_string businessName_var;
    opp_string businessType_var;
    Keywords keyWords_var;
    Coord peerLocation_var;
    double maxRange_var;
    simtime_t timeStamp_var;

  private:
    void copy(const Query& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Query&);

  public:
    Query(const char *name=NULL, int kind=0);
    Query(const Query& other);
    virtual ~Query();
    Query& operator=(const Query& other);
    virtual Query *dup() const {return new Query(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getBusinessName() const;
    virtual void setBusinessName(const char * businessName);
    virtual const char * getBusinessType() const;
    virtual void setBusinessType(const char * businessType);
    virtual Keywords& getKeyWords();
    virtual const Keywords& getKeyWords() const {return const_cast<Query*>(this)->getKeyWords();}
    virtual void setKeyWords(const Keywords& keyWords);
    virtual Coord& getPeerLocation();
    virtual const Coord& getPeerLocation() const {return const_cast<Query*>(this)->getPeerLocation();}
    virtual void setPeerLocation(const Coord& peerLocation);
    virtual double getMaxRange() const;
    virtual void setMaxRange(double maxRange);
    virtual simtime_t getTimeStamp() const;
    virtual void setTimeStamp(simtime_t timeStamp);
};

inline void doPacking(cCommBuffer *b, Query& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Query& obj) {obj.parsimUnpack(b);}


#endif // ifndef _QUERY_M_H_

